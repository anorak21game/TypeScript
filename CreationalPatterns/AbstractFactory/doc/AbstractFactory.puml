@startuml AbstractFactory

object Client {
    -factory
    +Client()
    +someOperation()
}

interface AbstractFactory {
    +createProductA()
    +createProductB()
}

class ConcreteFactory1 {
    +createProductA()
    +createProductB()
}

class ConcreteFactory2 {
    +createProductA()
    +createProductB()
}

interface ProductA {
    +usefulFunctionA()
}

class ConcreteProductA1 {
    +usefulFunctionA()
}

class ConcreteProductA2 {
    +usefulFunctionA()
}

interface ProductB {
    +usefulFunctionB()
    +anotherUsefulFunctionB()
}

class ConcreteProductB1 {
    +usefulFunctionB()
    +anotherUsefulFunctionB()
}

class ConcreteProductB2 {
    +usefulFunctionB()
    +anotherUsefulFunctionB()
}

Client ..> AbstractFactory

AbstractFactory <|.. ConcreteFactory1
AbstractFactory <|.. ConcreteFactory2

ConcreteFactory1 ..> ProductA
ConcreteFactory1 ..> ProductB

ConcreteFactory2 ..> ProductA
ConcreteFactory2 ..> ProductB

ProductA <|.. ConcreteProductA2
ProductA <|.. ConcreteProductA1

ProductB <|.. ConcreteProductB1
ProductB <|.. ConcreteProductB2
@enduml